[{"title":"Loading 组件优化思路","type":0,"sectionRef":"#","url":"blog/loading-optimiazation","content":"","keywords":""},{"title":"让 Loading 组件更加灵动","type":1,"pageTitle":"Loading 组件优化思路","url":"blog/loading-optimiazation#让-loading-组件更加灵动","content":"Quasar 的 Loading 对象中有一个参数名为 delay ，这个值代表如果在 delay 毫秒内接收到 Loading.hide() 那么就不去渲染 Loading 组件，用户就不会看到加载的过程。以前我都是直接简单粗暴地在耗时操作之前加上 Loading.show()，耗时操作结束了就加上 Loading.hide() ，很简单的逻辑，但是最终的效果不好，因为每一次都会渲染 Loading 样式，让用户觉得加载速度太慢，会觉得卡顿，而使用 delay 之后，小的数据加载量基本上不会有加载动画，在视觉上提升了应用流畅程度。 然后我在自己的加载组件中简单的实现了一下，效果确实不错。 <template> <q-inner-loading :showing=\"isLoading\"> <q-spinner-ball style=\"color:var(--themeColor)\" size=\"6em\" /> </q-inner-loading></template> <script>export default { name: 'Loading', props: { visible: Boolean, delay: { type: Number, default: 200 } }, data () { return { isLoading: false, timer: null } }, watch: { visible (val) { if (val) { this.timer = setTimeout(() => { this.isLoading = true }, this.delay) } else { clearTimeout(this.timer) this.isLoading = false } } }}</script> <style scoped></style> Copy 实现的办法也比较简单，就是监听组件 visible 值得变化，这个值由上一层的组件提供或者修改，当这个值变化的时候启动一个定时器，如果在定时器时间内收到了取消值，那么就是直接停止计时，也就是组织组件未来的渲染。 "},{"title":"欢迎来到 Memocast 的开发博客","type":0,"sectionRef":"#","url":"blog/Welcome","content":"","keywords":""},{"title":"Quasar + Electron + Muya + Monaco + WizNote = ？","type":1,"pageTitle":"欢迎来到 Memocast 的开发博客","url":"blog/Welcome#quasar--electron--muya--monaco--wiznote--？","content":"此处应有一段 Slogon 不知道你是否有和我一样的烦恼，在用 Typora 的时候想要有在线笔记的能力，用在线笔记的时候能有 Typora 一样的编辑能力，虽然说 Typora 和很多的第三方应用集成之后也能达到很棒的写作效率，例如结合 Git 进行笔记版本管理，结合 PicGo 实现笔记图片管理，或者是使用 Typora 作为笔记编辑器，编辑为知笔记。但这些还是太割裂了，不是吗？如果有得选，谁不想要一个可以 All in 的笔记软件呢？ 于是，Memocast 诞生了。  写代码的时候会疑惑，会怀疑自己，为什么要花这么多时间去做一个笔记软件，为知官方甚至已经推出了新的编辑器 WizLite ，其对 Markdown 的支持已经完全跟上了主流水平，甚至有所超出，而且公司成建制的开发能力必定要强于我个人，那为什么还要做，还要投入时间。 想了很多次，最终答案大概就是我可以，我想试试，我想要更强的掌控能力，我希望整个记录的流程都掌握在我自己手上。 人生难得几回创造的热情，故事便开始了。 "},{"title":"Memocast 用户指南","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"报告问题","type":1,"pageTitle":"Memocast 用户指南","url":"docs/intro#报告问题","content":"Memocast 现在基本是我一个人单独开发，开发资源极其有限，所有很多地方不能考虑周全，许多功能也存在问题，像每个文件夹的笔记暂时还只能显示前 100 条，笔记格式化对多行数学公式还存在问题等等。 因此，如果你在使用 Memocast 的过程中遇到了任何问题，或者有任何好的建议，可以在 GitHub 上给我提 issue，每一条 issue 我都会认真阅读并听取你的意见。 "},{"title":"加入开发","type":1,"pageTitle":"Memocast 用户指南","url":"docs/intro#加入开发","content":"你需要以下的开发环境 nodejs >= 12 Windows >= 10 或者 macOS >= 10.14.5 或者 Ubuntu >= 18 ，其他的系统并未经过测试，如出现问题请发 issue。 然后在终端运行以下指令。 git clone https://github.com/TankNee/Memocastcd Memocastnpm installnpm run dev Copy 如果你想打包成可执行文件，可以使用 npm run build Copy 期待你的 Pull Request "},{"title":"🏃‍♂️参与 Memocast 的开发","type":0,"sectionRef":"#","url":"docs/tutorial-development/get-started","content":"","keywords":""},{"title":"开发的前置知识","type":1,"pageTitle":"🏃‍♂️参与 Memocast 的开发","url":"docs/tutorial-development/get-started#开发的前置知识","content":"你需要有 Node.js，Git 的环境。你需要熟悉 ES6 的 JavaScript 语法最好能熟悉 Quasar 的各种组件，并有一定的改进能力你需要熟悉 CSS ， HTML 的语法 "},{"title":"在本地运行","type":1,"pageTitle":"🏃‍♂️参与 Memocast 的开发","url":"docs/tutorial-development/get-started#在本地运行","content":"首先你需要使用 git 工具将代码下载到本地。 git clone https://github.com/TankNee/Memocast.git Copy 因为整个仓库中有许多图片资源，导致整体大小达到了 40+ MB，所以要求你有一个比较好的网络环境，当然你也可以使用国内的一些代理。 然后你需要安装依赖 npm i Copy 安装依赖的过程可能比较长，这需要视你的网络环境而定。 以开发模式启动 Memocast npm run dev Copy Memocast 并没有使用太多和 Native 相关的东西，因此不需要 Xcode 和 VS 环境也能运行。 开发模式下支持代码的热重载，只要你保存了代码文件，Memocast 就会自动重新加载应用更新。 "},{"title":"编译 Memocast","type":1,"pageTitle":"🏃‍♂️参与 Memocast 的开发","url":"docs/tutorial-development/get-started#编译-memocast","content":"使用如下命令编译你当前平台的 Memocast 二进制文件。 npm run build Copy 同样这也需要良好的网络环境。 "},{"title":"🔪导出笔记与上传","type":0,"sectionRef":"#","url":"docs/tutorial-usage/export-note","content":"","keywords":""},{"title":"将导出的文件中的图片上传到图床","type":1,"pageTitle":"🔪导出笔记与上传","url":"docs/tutorial-usage/export-note#将导出的文件中的图片上传到图床","content":"如果你需要将导出的笔记发布到网络上，那么你或许会需要将图片上传到指定图床以便网络访问。因此我写了一个笔记图片上传工具，可以识别文件夹中的markdown文件，并自动上传本地图片。 上传服务使用的是 PicGo，需要保持 PicGo 的启动，当你在使用该工具时。 "},{"title":"安装 ndm-cli","type":1,"pageTitle":"🔪导出笔记与上传","url":"docs/tutorial-usage/export-note#安装-ndm-cli","content":"首先请确保你有 npm 与 node 环境，没有请谷歌安装。 在终端或者 cmd 中运行下面的指令。 npm install ndm-cli -g Copy 然后定位到刚刚导出的笔记的目录。 ndm upload <Your-Note-File-Name> Copy 然后等待图片上传完成即可，上传之后会自动替换笔记所有的本地图片链接。 "},{"title":"ndm-cli 简易文档","type":1,"pageTitle":"🔪导出笔记与上传","url":"docs/tutorial-usage/export-note#ndm-cli-简易文档","content":" tanknee@LAPTOP  ~  ndm -h Usage: ndm [options] [command] Commands: config Configure local .ndmrc file by command line interface create Create a note by template in current folder or the folder specified by config file (.ndmrc) flomo Save message to flomo help Display help init Initialize the note folder, providing a simple configuration file with .ndmrc lint Lint markdown note files using the remark cli (TODO) templates Show all templates that have installed upload Upload local images which are found in note file version Display version Options: -a, --all Upload all images of a folder -e, --ext [value] Extension of note file, md,txt etc. (defaults to \"md\") -g, --global Set global .ndmrc file -h, --help Output usage information -l, --language [value] Choose the language of note template, en-us,zh-cn etc. -l or --language (defaults to \"zh-cn\") -r, --recursion Recursively call the input to file path -t, --type [value] Choose the type of note template. leetcode, plain note or costum template from internet(https://...) etc. -t or --type <type name> (defaults to \"leetcode\") -v, --version Output the version number Examples: - Create a markdown note in relative path ./note which name is test.md and apply template by zh-cn $ ndm create ./note/test.md -l zh-cn -t leetcode -e md - Send message to flomo app! $ ndm flomo 'Hello Flomo!' - Config your .ndmrc file which is found on the local scale or global. $ ndm config flomourl=123123 < -g > - Upload Images $ ndm upload test.md Copy "},{"title":"ndm-cli 仓库地址","type":1,"pageTitle":"🔪导出笔记与上传","url":"docs/tutorial-usage/export-note#ndm-cli-仓库地址","content":"GitHub: https://github.com/TankNee/ndm-cli "},{"title":"🎄创建你自己的主题","type":0,"sectionRef":"#","url":"docs/tutorial-development/create-theme","content":"","keywords":""},{"title":"添加主题的步骤","type":1,"pageTitle":"🎄创建你自己的主题","url":"docs/tutorial-development/create-theme#添加主题的步骤","content":"打开主题文件夹放入主题文件，并校验主题文件名是否符合规范！回到 Memocast 刷新主题缓存在下拉框中选择主题 "},{"title":"主题文件规范","type":1,"pageTitle":"🎄创建你自己的主题","url":"docs/tutorial-development/create-theme#主题文件规范","content":"主题文件是一个纯粹的 css 文件，因此你可以使用任何与之相关的语法，Memocast 相关的元素选择器可以通过开发者工具查看，打开开发者工具的快捷键是：Ctrl + Shift + P ，Mac 下也可以直接使用顶部的菜单打开开发者工具。 主题文件必须选择一种明暗模式 明亮模式的主题的后缀应该是 light.css，而黑暗主题的后缀应该是 dark.css，如果命名不规范 Memocast 将会拒绝引入主题样式。 规范主题文件名示例：Default-Dark.dark.css，其中 Default-Dark 是主题的名字，将会显示在下拉框中。 Memocast 实现主题的方式实际上就是直接把 CSS 文件的内容插入到一个 <style> 标签中，因此你可以在开发者工具中快速调试，效果是完全一样的。 "},{"title":"CSS 变量","type":1,"pageTitle":"🎄创建你自己的主题","url":"docs/tutorial-development/create-theme#css-变量","content":"Memocast 提供了很多的实用 CSS 变量。 :root { /* 主题背景颜色 */ --backgroundColor: #35373e; /* 编辑器宽度 */ --editorAreaWidth: 90%; // 笔记列表的背景颜色 --activeItemBgColor: rgb(41, 42, 44); /*editor*/ /* 主题颜色，以透明度作为区分 */ --themeColor: rgb(242, 192, 55); --themeColor90: rgba(242, 192, 55, .9); --themeColor80: rgba(242, 192, 55, .8); --themeColor70: rgba(242, 192, 55, .7); --themeColor60: rgba(242, 192, 55, .6); --themeColor50: rgba(242, 192, 55, .5); --themeColor40: rgba(242, 192, 55, .4); --themeColor30: rgba(242, 192, 55, .3); --themeColor20: rgba(242, 192, 55, .2); --themeColor10: rgba(242, 192, 55, .1); /* 高亮颜色 */ --highlightColor: rgba(102, 177, 255, .6); --selectionColor: rgba(70, 122, 189, .7); /* 编辑区域的颜色，具体应用请在开发者工具中搜索 */ --editorColor: rgba(222, 222, 222, .7); --editorColor80: rgba(222, 222, 222, .8); --editorColor60: rgba(222, 222, 222, .6); --editorColor50: rgba(222, 222, 222, .5); --editorColor40: rgba(222, 222, 222, .4); --editorColor30: rgba(222, 222, 222, .3); --editorColor10: rgba(222, 222, 222, .1); --editorColor04: rgba(222, 222, 222, .04); --editorBgColor: rgb(53, 55, 62); --deleteColor: #cf000f; --iconColor: rgba(255, 255, 255, .56); --codeBgColor: #424344; --codeBlockBgColor: #424344; --footnoteBgColor: rgba(66, 67, 68, .3); --inputBgColor: #2f3336; --focusColor: var(--themeColor); --buttonFontColor: rgba(255, 255, 255, .6); --buttonBgColor: #424344; --buttonBorder: 1px solid rgba(0, 0, 0, 0.2); --buttonShadow: none; --buttonFontColorHover: var(--buttonFontColor); --buttonBgColorHover: #4f5051; --buttonBorderHover: 1px solid rgba(0, 0, 0, 0.3); --buttonFontColorActive: var(--buttonFontColor); --buttonBgColorActive: #333434; --buttonBorderActive: var(--buttonBorder); --buttonPrimaryFontColor: #ffffff; --buttonPrimaryBgColor: var(--themeColor); --buttonPrimaryBorder: none; --buttonPrimaryShadow: none; --buttonPrimaryFontColorHover: var(--buttonPrimaryFontColor); --buttonPrimaryBgColorHover: #5aabff; --buttonPrimaryBorderHover: var(--buttonPrimaryBorder); --buttonPrimaryFontColorActive: var(--buttonPrimaryFontColor); --buttonPrimaryBgColorActive: #2791ff; --buttonPrimaryBorderActive: var(--buttonPrimaryBorder); --buttonPrimaryFocusBorder: none; --buttonPrimaryFocusShadow: inset 0 0 0 1px rgba(24, 26, 31, 0.5), 0 0 0 1px var(--themeColor); --tableBorderColor: rgb(158, 158, 158); --highlightThemeColor: rgb(170, 147, 114); --treeNodeColor: rgb(174, 180, 187); --floatFontColor: rgba(255, 255, 255, .7); --floatBgColor: #3C4650; --floatHoverColor: rgba(255, 255, 255, .04); --floatBorderColor: rgba(0, 0, 0, .05); --floatShadow: rgba(0, 0, 0, 0.2); --maskColor: rgba(0, 0, 0, .7); --editorAreaWidth: 750px; --floatShadow: rgba(15, 15, 15, 0.03) 0px 0px 0px 1px, rgba(15, 15, 15, 0.04) 0px 3px 6px, rgba(15, 15, 15, 0.05) 0px 9px 24px;} Copy 你可以在这里找到默认主题：https://github.com/TankNee/Memocast/blob/master/src-electron/main-process/assets/css/Default-Dark.dark.css "},{"title":"Quasar 主题色设置","type":1,"pageTitle":"🎄创建你自己的主题","url":"docs/tutorial-development/create-theme#quasar-主题色设置","content":"Memocast 使用了 Quasar 作为框架，Quasar 中有许多的主题色，这些颜色决定了 Memocast 中许多组件的样式，你可以通过在主题文件中编写对应的主题色变量来改变这些颜色。 主题色颜色变量的格式为 --q-color-${name},其中 name 是主题名，有以下几种取值： primarysecondaryaccentdarkpositivenegativeinfowarning 你可以在主题文件中直接写入： --q-color-secondary: rgba(123,123,123,.7); Copy 来改变 secondary 的颜色！ "},{"title":"🎁下载与更新","type":0,"sectionRef":"#","url":"docs/tutorial-usage/install-application","content":"","keywords":""},{"title":"下载","type":1,"pageTitle":"🎁下载与更新","url":"docs/tutorial-usage/install-application#下载","content":"Memocast 每次更新都会将二进制文件上传到 Github Releases，你可以前往此处选择对应的文件下载安装 Memocast。 "},{"title":"正式版","type":1,"pageTitle":"🎁下载与更新","url":"docs/tutorial-usage/install-application#正式版","content":"正式版视 Memocast 面向普通用户的版本，相对而言更加稳定。  "},{"title":"预发布版","type":1,"pageTitle":"🎁下载与更新","url":"docs/tutorial-usage/install-application#预发布版","content":"预发布版将会包含 Memocast 的最新内容，但同样他也会包含一些未知的问题。  "},{"title":"更新","type":1,"pageTitle":"🎁下载与更新","url":"docs/tutorial-usage/install-application#更新","content":"当前应用内更新仅仅支持 Windows 平台， Linux 下存在 Bug 但未修复。 而 macOS 中需要 Apple Developer 的签名，我囊中羞涩就没有购买，如果你有兴趣请我喝一杯咖啡，当攒够足够多的赞助我将会购买 Apple 开发者资格并为 macOS 平台提供应用内更新！ 你可以在设置对话框中检查更新，如果当前有最新版本已经发布，那么你就可以快速更新到最新版。  "},{"title":"🗺笔记生成思维导图","type":0,"sectionRef":"#","url":"docs/tutorial-usage/markmap","content":"","keywords":""},{"title":"即将提供","type":1,"pageTitle":"🗺笔记生成思维导图","url":"docs/tutorial-usage/markmap#即将提供","content":" 提供工具栏，方便快速缩放到屏幕大小 提供 png，html，svg 导出。 "},{"title":"🚦已知问题","type":0,"sectionRef":"#","url":"docs/tutorial-usage/known-issues","content":"","keywords":""},{"title":"笔记只显示前 100 条","type":1,"pageTitle":"🚦已知问题","url":"docs/tutorial-usage/known-issues#笔记只显示前-100-条","content":"代码位置：https://github.com/TankNee/Memocast/blob/fe6d641994a397915ea07aeb12db3fd3b2b24fcf/src/store/server/actions.js#L202-L210 const result = await api.KnowledgeBaseApi.getCategoryNotes({ kbGuid, data: { category: category || currentCategory, start: start || 0, count: count || 100, withAbstract: true } }) Copy 需要加入滚动时加载以解决这个问题。 "},{"title":"格式化破坏数据公式","type":1,"pageTitle":"🚦已知问题","url":"docs/tutorial-usage/known-issues#格式化破坏数据公式","content":"使用 remark-pangu 对文章进行格式化的时候会让数学公式出现问题。 详情请查看这个 issue。 $$X_3^2$$ Copy 会变成 $$X\\_3^2$$ Copy 也就是多了个转义符。 "},{"title":"🏷使用标签","type":0,"sectionRef":"#","url":"docs/tutorial-usage/tutorial-tag","content":"🏷使用标签 标签是笔记的重要组成部分，我们可以使用标签来划分不同类别的笔记，即便标签分类中的笔记存放在不同的文件夹中。 Memocast 中的标签你可以在笔记标题中找到！ 当你的鼠标停留在笔记标题之上时，就会触发标签显示，此时点击即可触发标签页。","keywords":""},{"title":"🍨应用概览","type":0,"sectionRef":"#","url":"docs/tutorial-usage/summary","content":"","keywords":""},{"title":"介绍","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#介绍","content":"一款基于 Electron 、Muya 、Monaco 和为知笔记的编辑器，实现了类似 Typora 的编辑体验，并添加了更优秀的源代码模式，更好的图片服务，支持为知笔记私有部署，提供了众多快捷键。 "},{"title":"下载","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#下载","content":"你可以在 GitHub 的 Release 页面下载最新版本，与此同时，你也可以使用内置的更新按钮获取最新版本，注意 mac 并不支持直接使用内置更新，因为受限于 macOS 的安全策略，所有自动安装的应用应该被有效地签名。 GitHub Release：Releases · TankNee/Memocast · GitHub 更多有关下载的内容请查看这个指南。 "},{"title":"特色","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#特色","content":"较为完整的为知服务的支持。 笔记增删查改 文件夹增删 笔记导出成 PNG、Markdown 笔记文件夹批量导出 Markdown 支持为知图片服务 笔记标签增删查改 私有化部署服务器的支持 良好的 Markdown 编辑器体验 按下 @ 快捷输入 完整的快捷键支持，并在 macOS 下支持菜单和帮助查询。 将为知的网页剪辑笔记轻松转换为可阅读的 Markdown 文件 良好的图片支持，支持为知图片，支持 PicGo 上传图片，支持本地图片 相比 marktext ，编辑器做了很多的优化和本地化 支持笔记目录，支持目录跳转 支持流程图，vega 图，mermaid 图等等 笔记锁定模式，锁定之后键盘无法输入，减少误触 所见即所得，良好输入体验 支持 PicGo 图片服务，将笔记图片上传到指定图床 支持使用 pangu 格式化 markdown 文本，自动在中英文字符之间加入空格 你好Memocast => 你好 Memocast Copy 强大的源代码模式 使用 Monaco 作为源代码编辑器 使用 CmdOrCtrl + Shift + . 快捷切换源代码模式和 markdown 模式 语法高亮 侧边栏预览 完整开源， 项目 All in Github，在网络畅通的情况下可以使用内置的自动更新，快速将软件更新到最新版。 "},{"title":"截图展示","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#截图展示","content":""},{"title":"主界面","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#主界面","content":" "},{"title":"编辑器","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#编辑器","content":" "},{"title":"快捷输入","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#快捷输入","content":" "},{"title":"源代码模式","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#源代码模式","content":" "},{"title":"编辑器与国际化","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#编辑器与国际化","content":" "},{"title":"图片快速插入","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#图片快速插入","content":" "},{"title":"编辑器快捷操作","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#编辑器快捷操作","content":" "},{"title":"切换源代码模式","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#切换源代码模式","content":" "},{"title":"打字机模式","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#打字机模式","content":" 更多特色功能还请下载之后体验 "},{"title":"引用","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#引用","content":"感谢 Quasar Framework、Monaco 以及 MarkText 项目，从他们身上学到了很多，Memocast 有很多的灵感都来自他们，笔记的所见即所得编辑器来自 MarkText 中的 Muya 编辑器，源代码模式使用的编辑器来自 Monaca-Editor 项目。 感谢 Quasar 中文网，他们的文档对我有很大帮助。http://www.quasarchs.com/ "},{"title":"贡献者","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#贡献者","content":"感谢所有 Memocast 和 Neeto-Vue 的贡献者！ Thanks to all Memocast's contributors as well as Neeto-Vue's contributors! "},{"title":"分发许可证","type":1,"pageTitle":"🍨应用概览","url":"docs/tutorial-usage/summary#分发许可证","content":"Copyright © 2021 TankNee. This project is MIT licensed.  "}]